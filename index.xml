<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bits of Insight</title>
    <link>https://legends2k.github.io/</link>
    <description>Recent content on Bits of Insight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <copyright>Sundaram Ramaswamy</copyright>
    <lastBuildDate>Fri, 24 Feb 2017 12:14:41 +0530</lastBuildDate>
    
	<atom:link href="https://legends2k.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git Concepts</title>
      <link>https://legends2k.github.io/note/git_concepts/</link>
      <pubDate>Wed, 20 Feb 2019 19:56:56 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/git_concepts/</guid>
      <description>Git is a distributed VCS; each repo can be both a server/client Honestly, git (sub)commands are just graph manipulating commands Every codebase is made of a graph; each commit is a node with edges to parent(s)  Git diagrams often have arrows backwards for this reason only  Git stores snapshots not differences i.e. entire file contents &amp;mdash; as a blob  Every commit is a complete snapshot of tracked repo contents + (0 or more) parent ID(s) identified with a 40-byte SHA1-digested hash This way, the exact state of your project can be referred to, copied, or restored at any time    &amp;ldquo;finally figuring out that git commands are strangely named graph manipulation commands &amp;ndash; creating/deleting nodes, moving around pointers&amp;rdquo; &amp;ndash; Kent Beck</description>
    </item>
    
    <item>
      <title>GRUB Recovery</title>
      <link>https://legends2k.github.io/note/grub2_recovery/</link>
      <pubDate>Sun, 20 Jan 2019 18:35:20 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/grub2_recovery/</guid>
      <description>I tried upgrading the firmware of my old iOmega 1 TB HDD. Internally it’s a Barracuda LP family, ST31000520AS model Segate HDD. Seagate had released a firmware upgrade for this drive in 2010. I’m around 9 years late to the party!
My laptop doesn’t have a CD-ROM drive, also I prefer burning the ISO to a USB stick &amp;mdash; why waste a CD, eh? Rufus kindly refused as the supplied Seagate update ISO’s boot format was unrecognizable.</description>
    </item>
    
    <item>
      <title>Ideating vs Acting</title>
      <link>https://legends2k.github.io/post/ideating_acting/</link>
      <pubDate>Sun, 17 Jun 2018 23:23:10 -0700</pubDate>
      
      <guid>https://legends2k.github.io/post/ideating_acting/</guid>
      <description>Ideas Young people are constantly bombareded with free advice by the elderly: people tell them how to talk, how to socialize, how to deal with money matters, etc. It’s done to the point where it’s felt as preachy and rightly so. Why? More than what you say, kids pick up what you do. Words don’t mean much to them; actions speak much louder indeed.
Even as adults, many read motivational text, watch TED talks, discuss our problems with our friends and get ideas/free advice all the time on how to tackle.</description>
    </item>
    
    <item>
      <title>Go Setup</title>
      <link>https://legends2k.github.io/note/go_setup/</link>
      <pubDate>Sun, 17 Jun 2018 07:00:43 -0700</pubDate>
      
      <guid>https://legends2k.github.io/note/go_setup/</guid>
      <description>An IDE at least should do
 Auto-completion (a.k.a Intellisense) Jump to definition On-the-fly error checks Context-sensitive document lookup  Show variable and function type Show function description  Autorun gofmt on save Bonus: Auto-add/remove used/unused packages on file save  We’ll try to get these going on Emacs.
External Tools Though not part of the canonical tool set, these are written by seasoned Go devs
 gocode godef goflymake goimports godoc  Emacs Packages We’d be needing these too to interface with above tools</description>
    </item>
    
    <item>
      <title>Arch Linux Installation</title>
      <link>https://legends2k.github.io/note/arch_install/</link>
      <pubDate>Sun, 27 May 2018 17:00:46 -0700</pubDate>
      
      <guid>https://legends2k.github.io/note/arch_install/</guid>
      <description>I&amp;rsquo;ve a dual GPU laptop: Lenovo Legion Y520-15IKBN; the Nvidia GeForce 1050 Ti Mobile for graphics-heavy (3D) tasks and Intel HD Graphics 630 for rendering the rest. It has an SSD and a traditional spinning disk. UEFI + GPT as opposed to the classic BIOS + MBR combo is preferable. I&amp;rsquo;m a long-time Xubuntu user but I wanted to try Arch Linux. Here I note my experience in getting this laptop up and running.</description>
    </item>
    
    <item>
      <title>Shutting the ubiquitous backdoor</title>
      <link>https://legends2k.github.io/note/clean_me/</link>
      <pubDate>Sat, 12 May 2018 15:00:46 -0700</pubDate>
      
      <guid>https://legends2k.github.io/note/clean_me/</guid>
      <description>I believe resistance is futile if someone is bent on spying on you; there’re both serious and creative ways to go about it. Talking to your processor, behind your back, isn’t the primary or only means. Our’s is a golden age where corporates and government agencies stoop low enough to pry into bedrooms. Did you know that almost all machines1 you own have a processor aside from the one you paid for?</description>
    </item>
    
    <item>
      <title>Drawing tablet setup on Windows</title>
      <link>https://legends2k.github.io/note/tablet_setup/</link>
      <pubDate>Tue, 24 Apr 2018 10:53:43 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/tablet_setup/</guid>
      <description>Steps  Disable Windows defaults  Windows 10  Run → services.msc → Touch Keyboard and Handwriting Panel Service; stop and disable Disable Tablet mode under Tablet mode settings  Windows 7  Disable Tablet PC services from the Windows Features list Disable Flicks in Pen and Tablet settings   Install latest manufacturer drivers before first plugging in to the system Plug in device and test Enable Force Proportions to avoid disproportionate lines  Tablet Area: Full Screen Area: Monitor Force Proportions mightn&amp;rsquo;t be available on non-Wacom driver software like Huion&amp;rsquo;s.</description>
    </item>
    
    <item>
      <title>Git: Pushing to a Fork</title>
      <link>https://legends2k.github.io/note/push_fork/</link>
      <pubDate>Thu, 19 Apr 2018 13:57:03 -0700</pubDate>
      
      <guid>https://legends2k.github.io/note/push_fork/</guid>
      <description>Fork? Food!? When you fork1 a repository in GitHub, from your repository&amp;rsquo;s viewpoint, the one you forked from is called the &amp;ldquo;upstream&amp;rdquo;; a term used commonly in the FOSS world for a long time, to denote the original authors (or their repository) of a software. Fork is a concept introduced by GitHub (the code hosting platform) for separation of concerns; Git (the version control system) itself doesn&amp;rsquo;t have a concept of fork; from its viewpoint, it&amp;rsquo;s just another remote repository.</description>
    </item>
    
    <item>
      <title>Life in the Valley</title>
      <link>https://legends2k.github.io/post/valley_review/</link>
      <pubDate>Sat, 09 Dec 2017 10:35:43 +0530</pubDate>
      
      <guid>https://legends2k.github.io/post/valley_review/</guid>
      <description>I recently moved from India to the Silicon Valley; it&amp;rsquo;s almost a year now. Like all humans I developed opinions about my new environment; I want to record them under notes-to-self. Before proceeding, I&amp;rsquo;ll lay down the disclaimer: these are just my views and you&amp;rsquo;re totally entitled to your&amp;rsquo;s. Though I try to be reasonable, absolute logic isn&amp;rsquo;t just impractical but is inapplicable since feelings about one&amp;rsquo;s environment are always rooted in emotions, upbringing, habit, etc.</description>
    </item>
    
    <item>
      <title>My Inspirers</title>
      <link>https://legends2k.github.io/post/inspirers/</link>
      <pubDate>Thu, 02 Mar 2017 22:41:05 +0530</pubDate>
      
      <guid>https://legends2k.github.io/post/inspirers/</guid>
      <description>I have been inspired by many unknown personalities all over the internet and otherwise, but a few linger on my mind consistently to be listed here. Not all of them are authors but their works inspired me in some way.
Kalki R. Krishnamurthy A great writer, and freedom fighter, who effortlessly balanced content against gripping narration. He pioneered in writing under a unique genre &amp;mdash; Historical fiction &amp;mdash; by mixing imagination with facts in the right amount and proved that it can be done with great success.</description>
    </item>
    
    <item>
      <title>hello, world</title>
      <link>https://legends2k.github.io/post/hello_world/</link>
      <pubDate>Fri, 24 Feb 2017 12:36:30 +0530</pubDate>
      
      <guid>https://legends2k.github.io/post/hello_world/</guid>
      <description>Experience I have been writing on StackOverflow for quite a while now. I don&amp;rsquo;t know if these can be called writing since it&amp;rsquo;s purely technical. However, helping newbies with verbose answers has stoked some confidence in me; confidence that I am good at explaining things to people. Additionally, I recently gave an interactive presentation on a math-heavy topic that garnered good reviews; it took 2 months for me to prepare this slide deck viewable on a browser; more than half the time was spent not on technicalities but on the material.</description>
    </item>
    
    <item>
      <title>Useful GCC options</title>
      <link>https://legends2k.github.io/note/useful_gcc_opts/</link>
      <pubDate>Wed, 08 Feb 2017 16:45:02 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/useful_gcc_opts/</guid>
      <description>Here are some of the useful, but not widely known, options of GCC that I want to document.
gcc -dumpspecs Gives the specifications with which GCC was built.
gcc -fstack-usage Gives the stack usage function-wise for the compiled translation unit; this is helpful in measuring runtime memory usage. See the manual for details on deciphering its output.
# get macros defined when the language is C++ cpp -xc++ -dM /dev/null # get macros defined when the language is C cpp -dM /dev/null Prints the macros defined when the preprocessor was called.</description>
    </item>
    
    <item>
      <title>Emacs C&#43;&#43; auto-complete setup on Windows</title>
      <link>https://legends2k.github.io/note/install-irony-win32/</link>
      <pubDate>Tue, 24 Jan 2017 17:33:27 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/install-irony-win32/</guid>
      <description>This note is a guide to setup auto completion for C and C++ modes in Emacs on Windows with minimal manual work. We need Clang, Irony and some Company; we additionally require CMake and MinGW for building something small. Although there are many methods of getting this working, this was the most performant and least time-taking solution for me, so I&amp;rsquo;m documenting it here.
The general installation instructions provided in Irony&amp;rsquo;s README works but it asks you to build the complete Clang compiler from source for a single DLL (libclang.</description>
    </item>
    
    <item>
      <title>Lua Setup on Windows</title>
      <link>https://legends2k.github.io/note/lua_rocks/</link>
      <pubDate>Fri, 23 Sep 2016 17:00:46 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/lua_rocks/</guid>
      <description>Ingredients  CMake MinGW compiler (one of MinGW, TDM, MinGW-W64, …) Lua binaries LuaRocks setup binaries ZeroBrane Studio  Steps Involved  Make sure the commands cmake and mingw32-gcc are accessible from a general Command Prompt  Install CMake; straight-forward Install MinGW64; choose i686-6.2.0-posix-dwarf-rt_v5-rev0. Both archive and installer works. mingw-w64 project&amp;rsquo;s MinGW only has gcc.exe while luarocks expects mingw32-gcc.exe; create a symbolic link (mklink)  Download lua-5.3.3_Win32_bin.zip from LuaForge Lua Binaries project  Make sure Lua and MinGW are of the same arch This contains the binaries (.</description>
    </item>
    
    <item>
      <title>Blog – fit and finish</title>
      <link>https://legends2k.github.io/note/site_customizations/</link>
      <pubDate>Fri, 12 Aug 2016 17:00:46 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/site_customizations/</guid>
      <description>I did quite a few things to get this blog up and running the way you see it now.
Steps I Still Remember  Install Hugo; just extract and put in PATH &amp;mdash; can&amp;rsquo;t be simpler. Create a dummy site using the Quickstart guide; straight forward. Install Ghostwriter inside the themes directory.  Hugo recommends that customizations be done outside the theme&amp;rsquo;s directory tree to clearly differentiate customizations. I followed it.</description>
    </item>
    
    <item>
      <title>Hello, Hugo!</title>
      <link>https://legends2k.github.io/note/hello_hugo/</link>
      <pubDate>Mon, 11 Jul 2016 17:00:46 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/hello_hugo/</guid>
      <description>Many static site generators are coming up these days; 175 and still counting. Apart from the prime selling point of content creation from the comfort of your favourite text editor in Markdown, most have a wide gamut of themes to choose from. You are free to remix the theme to your taste however you see fit. Want to change the line spacing and paragraph alignment? Sure thing! Don&amp;rsquo;t like anything?</description>
    </item>
    
  </channel>
</rss>