<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tips on Bits of Insight</title>
    <link>https://legends2k.github.io/tags/tips/</link>
    <description>Recent content in tips on Bits of Insight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <copyright>Sundaram Ramaswamy</copyright>
    <lastBuildDate>Fri, 12 Jun 2020 12:59:50 +0530</lastBuildDate>
    
	<atom:link href="https://legends2k.github.io/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Improving Programmer Kata</title>
      <link>https://legends2k.github.io/note/programmer_kata/</link>
      <pubDate>Fri, 12 Jun 2020 12:59:50 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/programmer_kata/</guid>
      <description>Becoming a senior programmer/engineer doesn’t happen in a day.
 Like most skills, often you need grit than intelligence/smartness.
 Guidelines  Write small toy programs to prove yourself right / wrong  It’s easy to get lost in the details of a large project; however it’s just noise A toy programs is a simple way of filtering signal from noise   Document what you learn  Sprinkle enough comments; they&amp;rsquo;ll help you later Write markdown articles for involved topics   Keep a repository handy  This should have all your workouts, big or small It used be usable any where without installing big tool chains Preferably plain text; searchable readily with omnipresent tools grep and find   Write something substantial &amp;ndash; a mini-project  Professionally most programmers are just cogs in a large wheel Authoring a small project end-to-end leads to much deeper insights   Scope  Start with something small and tangible Not having something decent in a week is a sign You&amp;rsquo;re biting more than you could chew, cut back   Always RTFM  Mark of a good engineer: ability to digest design, API documentation or books Grok documentation and articles written by better programmers   Be consistent  Work on your pet project at least an hour a day An hour isn&amp;rsquo;t much &amp;ndash; consider the minutes that go wasted in a day Trick: small, incremental changes every day; don’t lose steam   Write cross-platform and cross toolchain code  It makes you a better programmer Code adhering to standards has longevity and better portability Widens user base   Toolchain  Use the same set of tools everywhere (across platforms) Improves muscle memory Sticking to a same set of tools lets tools not get in your way Examples: coreutils, findutils, binutils, Emacs, Vim, etc.</description>
    </item>
    
  </channel>
</rss>