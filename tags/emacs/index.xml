<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Emacs on Bits of Insight</title><link>https://legends2k.github.io/tags/emacs/</link><description>Recent content in Emacs on Bits of Insight</description><generator>Hugo 0.125.1</generator><language>en-uk</language><copyright>Sundaram Ramaswamy</copyright><lastBuildDate>Sun, 07 Apr 2024 19:31:39 +0530</lastBuildDate><atom:link href="https://legends2k.github.io/tags/emacs/index.xml" rel="self" type="application/rss+xml"/><item><title>Calculator Cheat Sheet</title><link>https://legends2k.github.io/note/emacs_calc/</link><pubDate>Sat, 30 Mar 2024 06:17:52 +0530</pubDate><guid>https://legends2k.github.io/note/emacs_calc/</guid><description>I use the GNU Emacs Calc, an RPN calculator, exclusively unless I’m away from a computer; as a programming, scientific and general calculator. This is my cheat sheet for my oft-used functions. There’s also a printable, broad-coverage official reference card (PDF). True to Emacs’ documenting tradition, the manual documents all features extensively, with examples too.
Programming Binary Set binary radix: d 2 Prefix with O to display two’s complement as 2##1100 instead of -2#0100 Notice #-count for disambiguation Other useful radices: 16, 0 and 8 Set word size (32 bits by default) before doing anything interesting: b w Set negative word size if you want to work on signed numbers Arithmetic -1320 &amp;gt;&amp;gt; 4 = 65530 (base = 16) instead of -83 (base = -16) Manually clip values to $2^w$: b c Set word size per-operation (except shifts/rotates) with prefix: C-u SIZE Example: C-u 4 b n flips bits and clips to $2^4$ Enable leading zero display: d z Useful to see the entire word Enable digit grouping: d g Input numbers in a particular radix: R#DIGITS e.</description></item><item><title>Emacs Go Setup</title><link>https://legends2k.github.io/note/go_setup/</link><pubDate>Sun, 17 Jun 2018 07:00:43 -0700</pubDate><guid>https://legends2k.github.io/note/go_setup/</guid><description>An IDE should at least aid with
Auto-completion (a.k.a Intellisense) Jump to definition On-the-fly error checks Additionally it’d be good to have
Context-sensitive document lookup Show variable and function type Show function description Auto-run gofmt on save Auto-add/remove used/unused packages on file save We’ll get these working for Go on Emacs using LSP. It’s no secret that Emacs’ LSP support is top notch.
We assume Go 1.17+ i.e. with full modules support and GO111MODULE unset1.</description></item><item><title>Emacs C++ auto-complete on Windows</title><link>https://legends2k.github.io/note/c++_irony_win32/</link><pubDate>Tue, 24 Jan 2017 17:33:27 +0530</pubDate><guid>https://legends2k.github.io/note/c++_irony_win32/</guid><description>This note is a guide to setup auto completion for C and C++ modes in Emacs on Windows with minimal manual work. We need Clang, Irony and some Company; we additionally require CMake and MinGW for building something small. Although there are many methods of getting this working, this was the most performant and least time-taking solution for me, so I&amp;rsquo;m documenting it here.
The general installation instructions provided in Irony&amp;rsquo;s README works but it asks you to build the complete Clang compiler from source for a single DLL (libclang.</description></item></channel></rss>