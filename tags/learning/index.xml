<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning on Bits of Insight</title><link>https://legends2k.github.io/tags/learning/</link><description>Recent content in Learning on Bits of Insight</description><generator>Hugo 0.125.1</generator><language>en-uk</language><copyright>Sundaram Ramaswamy</copyright><lastBuildDate>Tue, 19 Dec 2023 13:17:50 +0530</lastBuildDate><atom:link href="https://legends2k.github.io/tags/learning/index.xml" rel="self" type="application/rss+xml"/><item><title>Computer Graphics Resouces</title><link>https://legends2k.github.io/note/cg_resources/</link><pubDate>Mon, 08 Mar 2021 16:08:36 +0530</pubDate><guid>https://legends2k.github.io/note/cg_resources/</guid><description>Here’s a curated list of learning resources I usually recommend for self-studying the domain of Computer Graphics.
Learning graphics concepts isn’t the same as learning a rendering library; the latter is usually not very beneficial since a new library eventually replaces/takes over. Strive to learn the theory behind the domain, not the tools or their idiosyncrasies. Once you internalize the basic ideas, try doing some CG projects with increasing hardness.</description></item><item><title>Improving Programmer Kata</title><link>https://legends2k.github.io/note/programmer_kata/</link><pubDate>Fri, 12 Jun 2020 12:59:50 +0530</pubDate><guid>https://legends2k.github.io/note/programmer_kata/</guid><description>Becoming a good programmer doesn’t happen in a day.
Like most fields, you need grit more than intelligence/smartness.
Guidelines Write small toy programs to prove yourself right / wrong It’s easy to get lost in the details of a large project; it’s just noise A toy program is a simple way of filtering signal from noise Document what you learn Sprinkle enough comments; they&amp;rsquo;ll help you later Write markdown articles with references for involved topics Always RTFM Mark of a good engineer: ability to digest design, API documentation or books Grok documentation and articles written by better programmers Keep a repository handy This should have all your workouts, big or small Usable any where without installing big tool chains Preferably plain text; searchable readily with omnipresent tools grep and find Write something substantial &amp;ndash; a mini-project Professionally most programmers are just cogs in a large wheel Authoring a small project end-to-end leads to much deeper insights Great tools like ripgrep are hobby projects Scope your project Start with something small and tangible Have something working in a week If not, you&amp;rsquo;re biting more than you could chew scope down or burn out Be consistent Work on your pet project at least an hour a day An hour isn&amp;rsquo;t much &amp;ndash; usually total wasted minutes/day is more Trick: small, incremental changes every day; don’t lose steam Write cross-platform and cross toolchain code Makes you a better programmer Standards-adhering code has longevity and better portability Widens user base Have a reliable toolchain setup Use the same set of tools everywhere (across platforms) Improves muscle memory; kata Sticking to a same set of tools lets them not get in your way; productivity Examples: coreutils, findutils, binutils, Emacs, Vim, etc.</description></item></channel></rss>