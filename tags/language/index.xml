<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>language on Bits of Insight</title><link>https://legends2k.github.io/tags/language/</link><description>Recent content in language on Bits of Insight</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Sundaram Ramaswamy</copyright><lastBuildDate>Wed, 13 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://legends2k.github.io/tags/language/index.xml" rel="self" type="application/rss+xml"/><item><title>Assertions vs if checks</title><link>https://legends2k.github.io/note/assert_vs_if/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://legends2k.github.io/note/assert_vs_if/</guid><description>TL;DR Any program can have two classes of issues:
Runtime problems: situations programmer foresaw and handled; expected. E.g. invalid inputs, no access to resource, unreachable network, … Bugs: programmer mistakes; unexpected. E.g. buffer overflow, access violation, … There are different tools to deal with each; don’t conflate one with the other.
An assertion is just a validation of a programmer expectation; it “fires” when the expectation is betrayed.
(1) is familiar to most; use one of your language-provided feature including if, try-catch-throw, etc.</description></item><item><title>C++ Primer</title><link>https://legends2k.github.io/note/c++_primer/</link><pubDate>Thu, 06 Sep 2018 17:00:46 -0700</pubDate><guid>https://legends2k.github.io/note/c++_primer/</guid><description>Within C++, there is a much smaller and cleaner language struggling to get out. — Bjarne Stroustrup
C++ is vast. If you’re beginning to learn it, the internet has enough discouraging words. Just start learning instead of reading about it i.e. don’t learn about C++, learn C++. The innumerable topics might be daunting, but don’t worry. Knowing a few concepts will get you productive. More than the actual content, this article aims to give you keywords of that set, so that you can pursue them further.</description></item><item><title>Emacs Go Setup</title><link>https://legends2k.github.io/note/go_setup/</link><pubDate>Sun, 17 Jun 2018 07:00:43 -0700</pubDate><guid>https://legends2k.github.io/note/go_setup/</guid><description>An IDE should at least aid with
Auto-completion (a.k.a Intellisense) Jump to definition On-the-fly error checks Additionally it’d be good to have
Context-sensitive document lookup Show variable and function type Show function description Auto-run gofmt on save Auto-add/remove used/unused packages on file save We’ll get these working for Go on Emacs using LSP. It’s no secret that Emacs’ LSP support is top notch.
We assume Go 1.17+ i.e. with full modules support and GO111MODULE unset1.</description></item><item><title>Emacs C++ auto-complete on Windows</title><link>https://legends2k.github.io/note/c++_irony_win32/</link><pubDate>Tue, 24 Jan 2017 17:33:27 +0530</pubDate><guid>https://legends2k.github.io/note/c++_irony_win32/</guid><description>This note is a guide to setup auto completion for C and C++ modes in Emacs on Windows with minimal manual work. We need Clang, Irony and some Company; we additionally require CMake and MinGW for building something small. Although there are many methods of getting this working, this was the most performant and least time-taking solution for me, so I&amp;rsquo;m documenting it here.
The general installation instructions provided in Irony&amp;rsquo;s README works but it asks you to build the complete Clang compiler from source for a single DLL (libclang.</description></item><item><title>Lua Setup on Windows</title><link>https://legends2k.github.io/note/lua_rocks/</link><pubDate>Fri, 23 Sep 2016 17:00:46 +0530</pubDate><guid>https://legends2k.github.io/note/lua_rocks/</guid><description>Ingredients CMake MinGW compiler (one of MinGW, TDM, MinGW-W64, …) Lua binaries LuaRocks setup binaries ZeroBrane Studio Steps Involved Make sure the commands cmake and mingw32-gcc are accessible from a general Command Prompt Install CMake; straight-forward Install MinGW64; choose i686-6.2.0-posix-dwarf-rt_v5-rev0. Both archive and installer works. mingw-w64 project&amp;rsquo;s MinGW only has gcc.exe while luarocks expects mingw32-gcc.exe; create a symbolic link (mklink) Download lua-5.3.3_Win32_bin.zip from LuaForge Lua Binaries project Make sure Lua and MinGW are of the same arch This contains the binaries (.</description></item></channel></rss>