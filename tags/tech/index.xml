<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on Bits of Insight</title>
    <link>https://legends2k.github.io/tags/tech/</link>
    <description>Recent content in tech on Bits of Insight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <copyright>Sundaram Ramaswamy</copyright>
    <lastBuildDate>Thu, 18 Feb 2021 18:40:53 +0530</lastBuildDate><atom:link href="https://legends2k.github.io/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hacker Culture</title>
      <link>https://legends2k.github.io/note/hacker_culture/</link>
      <pubDate>Thu, 18 Feb 2021 18:40:53 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/hacker_culture/</guid>
      <description>You can‚Äôt learn everything from scratch practically; you need to stand on the shoulder of giants. These articles were very insightful; either it‚Äôs a clear writing that shares my already-held belief or something that reshaped my thinking. I‚Äôve collected them over the years.
It‚Äôs a bookmark page I update now and then.
By Authors Eric S Raymond Renowned hacker1. He‚Äôs written a lot about UNIX philosophy including The Art of Unix Programming and The Unix Koans of Master Foo.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 4 Setup</title>
      <link>https://legends2k.github.io/note/rpi4_setup/</link>
      <pubDate>Tue, 09 Feb 2021 11:27:59 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/rpi4_setup/</guid>
      <description>I neither have a micro HDMI adapter nor a dedicated display for the Pi. I just want to use it as a server. Thanks to Raspbian for providing a simple way to auto-enable SSH on boot!
I prefer the leaner, manual approach over NOOBS, the more popular option.
 dd Raspbian‚Äôs image on to a new SD card To auto-start SSH service on boot touch ssh in /boot partition Insert SD card, connect ethernet cable (RJ-45) and boot  Check IP address assigned to RPi from your router‚Äôs portal   ssh -l pi IP  Change default password (raspberry) with passwd sudo apt update sudo apt upgrade   Use raspi-config and setup  Locale Wi-Fi country code  Needed to abide by your country‚Äôs wireless laws Radio device may not work properly if not done   Wi-Fi (SSID and password) Enable SSH (for good measure) Check systemctl is-enabled sshd Make sure wireless isn‚Äôt soft-blocked: rfkill list and rfkill unblock wifi   Unplug ethernet and wireless should work now  Use ifconfig to know your Mac address eth0/wlan0 interfaces that‚Äôre up have inet (IP address) populated   Use raspi-config and enable VNC  Setup VNC password: sudo vncpasswd -service Boot into Desktop instead of Console in System Options -&amp;gt; Boot / Auto Login  See this if you want to boot to CLI and startx later [3]   Make sure to select a resolution under Display Options -&amp;gt; Resolution For macOS Screen Sharing to work, make /etc/vnc/config.</description>
    </item>
    
    <item>
      <title>Resize root under LVM</title>
      <link>https://legends2k.github.io/note/lvm_resize/</link>
      <pubDate>Mon, 22 Jun 2020 07:36:47 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/lvm_resize/</guid>
      <description>My root partition had unused space while /home was starving. I needed to resize both without data loss. I‚Äôd foreseen this and created my Linux partitions using LVM while installing Arch üòá .
Since operations here involve resizing /, boot from Live USB and then perform them. Also make sure the USB is UEFI bootable; otherwise it‚Äôd mean changing BIOS settings to enable Legacy Boot. This may lead to GRUB‚Äôs disappearance from boot menu.</description>
    </item>
    
    <item>
      <title>Improving Programmer Kata</title>
      <link>https://legends2k.github.io/note/programmer_kata/</link>
      <pubDate>Fri, 12 Jun 2020 12:59:50 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/programmer_kata/</guid>
      <description>Becoming a good programmer doesn‚Äôt happen in a day.
 Like most skills, often you need grit than intelligence/smartness.
 Guidelines  Write small toy programs to prove yourself right / wrong  It‚Äôs easy to get lost in the details of a large project; it‚Äôs just noise A toy program is a simple way of filtering signal from noise   Document what you learn  Sprinkle enough comments; they&amp;rsquo;ll help you later Write markdown articles with references for involved topics   Always RTFM  Mark of a good engineer: ability to digest design, API documentation or books Grok documentation and articles written by better programmers   Keep a repository handy  This should have all your workouts, big or small Usable any where without installing big tool chains Preferably plain text; searchable readily with omnipresent tools grep and find   Write something substantial &amp;ndash; a mini-project  Professionally most programmers are just cogs in a large wheel Authoring a small project end-to-end leads to much deeper insights Great tools like ripgrep are hobby projects   Scope your project  Start with something small and tangible Have something working in a week If not, you&amp;rsquo;re biting more than you could chew; scope down   Be consistent  Work on your pet project at least an hour a day An hour isn&amp;rsquo;t much &amp;ndash; usually total wasted minutes/day is more Trick: small, incremental changes every day; don‚Äôt lose steam   Write cross-platform and cross toolchain code  Makes you a better programmer Standards-adhering code has longevity and better portability Widens user base   Have a reliable toolchain setup  Use the same set of tools everywhere (across platforms) Improves muscle memory; kata Sticking to a same set of tools lets them not get in your way; productivity Examples: coreutils, findutils, binutils, Emacs, Vim, etc.</description>
    </item>
    
    <item>
      <title>Git Wizardry</title>
      <link>https://legends2k.github.io/note/git_nuances/</link>
      <pubDate>Wed, 13 May 2020 19:56:56 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/git_nuances/</guid>
      <description>Git has its oddities with unusual commands and flags. I keep learning something new every now and then.
A decent understanding of basic Git concepts is a prerequisite.
show time! The easiest way to see the diff introduced by a reference (fancy name for commit) is not git diff!
git show REF It shows details about the commit along with the changes it brings about. Of course, you can control the amount of information thrown at you with the usual options show shares with log: --name-status, --shortstat, --stat, --summary, etc.</description>
    </item>
    
    <item>
      <title>My First Game Jam!</title>
      <link>https://legends2k.github.io/note/sneak_out/</link>
      <pubDate>Tue, 26 Feb 2019 20:54:34 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/sneak_out/</guid>
      <description>I had a great first experience participating in a game jam &amp;ndash; 5th Alakajam. A three-day game jam where we1 wrote a primitive, real-time tactical strategy game: Sneak Out. The game is playable within a browser, thanks to raylib and WebAssembly.
 Sneak Out! from within the browser
  I‚Äôm a person with a decent degree of analysis paralysis. A code jam was the perfect antidote to kick me out of my rut!</description>
    </item>
    
    <item>
      <title>I Git it!</title>
      <link>https://legends2k.github.io/note/git_concepts/</link>
      <pubDate>Wed, 20 Feb 2019 19:56:56 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/git_concepts/</guid>
      <description>Basics like initializing (a repository), staging and commiting files aren‚Äôt explained here; they simply make sense; no ‚ÄòAha!‚Äôs there. Moving references, branching and merging &amp;mdash; coupled with Git‚Äôs arcane command names1 &amp;mdash; are the confusing parts.
Basics  Git is a distributed VCS; each repo can be both a server/client Honestly, git (sub)commands are just graph manipulating commands Every codebase is made of a graph; each commit is a node with edges to parent(s)2  Git diagrams often have arrows backwards (‚Üê) for this reason   Git stores snapshots not differences i.</description>
    </item>
    
    <item>
      <title>GRUB Recovery</title>
      <link>https://legends2k.github.io/note/grub2_recovery/</link>
      <pubDate>Sun, 20 Jan 2019 18:35:20 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/grub2_recovery/</guid>
      <description>I tried upgrading the firmware of my old iOmega 1 TB HDD. Internally it‚Äôs a Barracuda LP family, ST31000520AS model Segate HDD. Seagate had released a firmware upgrade for this drive in 2010. I‚Äôm around 9 years late to the party!
My laptop doesn‚Äôt have a CD-ROM drive, also I prefer burning the ISO to a USB stick &amp;mdash; why waste a CD, eh? Rufus kindly refused as the supplied Seagate update ISO‚Äôs boot format was unrecognizable.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Primer</title>
      <link>https://legends2k.github.io/note/c&#43;&#43;_primer/</link>
      <pubDate>Thu, 06 Sep 2018 17:00:46 -0700</pubDate>
      
      <guid>https://legends2k.github.io/note/c&#43;&#43;_primer/</guid>
      <description>Within C++, there is a much smaller and cleaner language struggling to get out. ‚Äî Bjarne Stroustrup
 C++ is vast. If you‚Äôre beginning to learn it, the internet has enough discouraging words. Just start learning instead of reading about it i.e. don‚Äôt learn about C++, learn C++. The innumerable topics might be daunting, but don‚Äôt worry. Knowing a few concepts will get you productive. More than the actual content, this article aims to give you keywords of that set, so that you can pursue them further.</description>
    </item>
    
    <item>
      <title>Emacs Go Setup</title>
      <link>https://legends2k.github.io/note/go_setup/</link>
      <pubDate>Sun, 17 Jun 2018 07:00:43 -0700</pubDate>
      
      <guid>https://legends2k.github.io/note/go_setup/</guid>
      <description>An IDE at least should do
 Auto-completion (a.k.a Intellisense) Jump to definition On-the-fly error checks Context-sensitive document lookup  Show variable and function type Show function description   Autorun gofmt on save Bonus: Auto-add/remove used/unused packages on file save  We‚Äôll try to get these going on Emacs.
External Tools Though not part of the canonical tool set, these are written by seasoned Go devs
 gocode godef goflymake goimports godoc  Emacs Packages We‚Äôd be needing these too to interface with above tools</description>
    </item>
    
    <item>
      <title>Arch Linux Configuration</title>
      <link>https://legends2k.github.io/note/arch_config/</link>
      <pubDate>Sun, 27 May 2018 17:00:46 -0700</pubDate>
      
      <guid>https://legends2k.github.io/note/arch_config/</guid>
      <description>See Arch Linux Installation for installation notes.
Network In the newly installed Arch you might notice that there&amp;rsquo;s no network connectivity. To enable do what you did during installation (see Arch Linux Installation, ¬ß2 Wireless Network). I did it only to realize, for netctl to hook to a WPA-secured network, the wpa_supplicant package is needed but was absent on the installed system. To connect to the internet, you need a package from the internet!</description>
    </item>
    
    <item>
      <title>Arch Linux Installation</title>
      <link>https://legends2k.github.io/note/arch_install/</link>
      <pubDate>Sun, 27 May 2018 17:00:46 -0700</pubDate>
      
      <guid>https://legends2k.github.io/note/arch_install/</guid>
      <description>I&amp;rsquo;ve a dual GPU laptop: Lenovo Legion Y520-15IKBN; the Nvidia GeForce 1050 Ti Mobile for graphics-heavy (3D) tasks and Intel HD Graphics 630 for rendering the rest. It has an SSD and a traditional spinning disk. UEFI + GPT as opposed to the classic BIOS + MBR combo is preferable. I&amp;rsquo;m a long-time Xubuntu user but I wanted to try Arch Linux. Here I note my experience in getting this laptop up and running.</description>
    </item>
    
    <item>
      <title>Shutting the ubiquitous backdoor</title>
      <link>https://legends2k.github.io/note/clean_me/</link>
      <pubDate>Sat, 12 May 2018 15:00:46 -0700</pubDate>
      
      <guid>https://legends2k.github.io/note/clean_me/</guid>
      <description>I believe resistance is futile if someone is bent on spying on you; there‚Äôre both serious and creative ways to go about it. Talking to your processor, behind your back, isn‚Äôt the primary or only means. Our‚Äôs is a golden age where corporates and government agencies stoop low enough to pry into bedrooms. Did you know that almost all machines1 you own have a processor aside from the one you paid for?</description>
    </item>
    
    <item>
      <title>Git: Pushing to a Fork</title>
      <link>https://legends2k.github.io/note/git_push_fork/</link>
      <pubDate>Thu, 19 Apr 2018 13:57:03 -0700</pubDate>
      
      <guid>https://legends2k.github.io/note/git_push_fork/</guid>
      <description>Fork? Food!? When you fork1 a repository in GitHub, from your repository&amp;rsquo;s viewpoint, the one you forked from is called the &amp;ldquo;upstream&amp;quot;; a term used commonly in the FOSS world for a long time, to denote the original authors (or their repository) of a software. Fork is a concept introduced by GitHub (the code hosting platform) for separation of concerns; Git (the version control system) itself doesn&amp;rsquo;t have a concept of fork; from its viewpoint, it&amp;rsquo;s just another remote repository.</description>
    </item>
    
    <item>
      <title>Useful GCC options</title>
      <link>https://legends2k.github.io/note/useful_gcc_opts/</link>
      <pubDate>Wed, 08 Feb 2017 16:45:02 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/useful_gcc_opts/</guid>
      <description>Here are some of the useful, but not widely known, options of GCC that I want to document.
GCC Build Specs gcc -dumpspecs Gives the specifications with which GCC was built.
Stack Usage gcc -fstack-usage Gives the stack usage function-wise for the compiled translation unit; this is helpful in measuring runtime memory usage. See the manual for details on deciphering its output.
Macros and Include Directories # get macros defined when the language is C++ cpp -xc++ -dM /dev/null # get macros defined when the language is C cpp -dM /dev/null Prints the macros defined when the preprocessor was called.</description>
    </item>
    
    <item>
      <title>Emacs C&#43;&#43; auto-complete on Windows</title>
      <link>https://legends2k.github.io/note/c&#43;&#43;_irony_win32/</link>
      <pubDate>Tue, 24 Jan 2017 17:33:27 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/c&#43;&#43;_irony_win32/</guid>
      <description>This note is a guide to setup auto completion for C and C++ modes in Emacs on Windows with minimal manual work. We need Clang, Irony and some Company; we additionally require CMake and MinGW for building something small. Although there are many methods of getting this working, this was the most performant and least time-taking solution for me, so I&amp;rsquo;m documenting it here.
The general installation instructions provided in Irony&amp;rsquo;s README works but it asks you to build the complete Clang compiler from source for a single DLL (libclang.</description>
    </item>
    
    <item>
      <title>Lua Setup on Windows</title>
      <link>https://legends2k.github.io/note/lua_rocks/</link>
      <pubDate>Fri, 23 Sep 2016 17:00:46 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/lua_rocks/</guid>
      <description>Ingredients  CMake MinGW compiler (one of MinGW, TDM, MinGW-W64, ‚Ä¶) Lua binaries LuaRocks setup binaries ZeroBrane Studio  Steps Involved Make sure the commands cmake and mingw32-gcc are accessible from a general Command Prompt  Install CMake; straight-forward Install MinGW64; choose i686-6.2.0-posix-dwarf-rt_v5-rev0. Both archive and installer works. mingw-w64 project&amp;rsquo;s MinGW only has gcc.exe while luarocks expects mingw32-gcc.exe; create a symbolic link (mklink)   Download lua-5.3.3_Win32_bin.zip from LuaForge Lua Binaries project  Make sure Lua and MinGW are of the same arch This contains the binaries (.</description>
    </item>
    
    <item>
      <title>Blog ‚Äì fit and finish</title>
      <link>https://legends2k.github.io/note/site_customizations/</link>
      <pubDate>Fri, 12 Aug 2016 17:00:46 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/site_customizations/</guid>
      <description>I did quite a few things to get this blog up and running the way you see it now.
Steps I Still Remember  Install Hugo; just extract and put in PATH &amp;mdash; can&amp;rsquo;t be simpler. Create a dummy site using the Quickstart guide; straight forward. Install Ghostwriter inside the themes directory.  Hugo recommends that customizations be done outside the theme&amp;rsquo;s directory tree to clearly differentiate customizations. I followed it.</description>
    </item>
    
    <item>
      <title>Hello, Hugo!</title>
      <link>https://legends2k.github.io/note/hello_hugo/</link>
      <pubDate>Mon, 11 Jul 2016 17:00:46 +0530</pubDate>
      
      <guid>https://legends2k.github.io/note/hello_hugo/</guid>
      <description>Many static site generators are coming up these days; 175 and still counting. Apart from the prime selling point of content creation from the comfort of your favourite text editor in Markdown, most have a wide gamut of themes to choose from. You are free to remix the theme to your taste however you see fit. Want to change the line spacing and paragraph alignment? Sure thing! Don&amp;rsquo;t like anything? Ditch them all and whip up something new.</description>
    </item>
    
  </channel>
</rss>
